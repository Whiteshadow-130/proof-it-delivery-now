
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bxalgkqkqxrnirzjqsqb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ4YWxna3FrcXhybmlyempxc3FiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MDgyMTcsImV4cCI6MjA2MDM4NDIxN30.uni1-viSrGowXOM4b5vFADuBAmzsJgAH5de2Id1r0fU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

/**
 * Ensures that the authenticated user exists in the users table.
 * This function should be called after authentication.
 * @returns The user data from the users table, or null if there was an error
 */
export const ensureUserExists = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.error('No authenticated user found');
      return null;
    }
    
    console.log('Ensuring user exists for ID:', user.id);
    
    // Check if user exists in the users table
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .maybeSingle(); // Use maybeSingle instead of single to prevent errors if no row is found
    
    if (checkError) {
      console.error('Error checking if user exists:', checkError);
      return null;
    }
    
    // If user doesn't exist, create them
    if (!existingUser) {
      console.log('User not found in database, creating new user record');
      
      // First check if user has company_name in metadata
      let companyId = null;
      const companyName = user.user_metadata?.company_name || 'Default Company';
      
      // Create a company first if needed
      const { data: company, error: companyError } = await supabase
        .from('companies')
        .insert({
          name: companyName
        })
        .select()
        .single();
      
      if (companyError) {
        console.error('Error creating company:', companyError);
        return null;
      }
      
      companyId = company?.id;
      
      const { data: newUser, error: insertError } = await supabase
        .from('users')
        .insert([{
          id: user.id,
          email: user.email || '',
          full_name: user.user_metadata?.full_name || null,
          avatar_url: user.user_metadata?.avatar_url || null,
          company_id: companyId
        }])
        .select()
        .single();
      
      if (insertError) {
        console.error('Error creating user record:', insertError);
        return null;
      }
      
      console.log('Created new user record successfully:', newUser);
      return newUser;
    }
    
    console.log('Found existing user record:', existingUser);
    return existingUser;
  } catch (error) {
    console.error('Error in ensureUserExists:', error);
    return null;
  }
};
