
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bxalgkqkqxrnirzjqsqb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ4YWxna3FrcXhybmlyempxc3FiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MDgyMTcsImV4cCI6MjA2MDM4NDIxN30.uni1-viSrGowXOM4b5vFADuBAmzsJgAH5de2Id1r0fU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

/**
 * Creates a company in the database
 * @param companyName The name of the company to create
 * @returns The company ID or null if there was an error
 */
export const createCompany = async (companyName: string) => {
  try {
    // Using RPC call to create company with elevated privileges
    const { data: companyId, error } = await supabase.rpc(
      'create_company_for_user',
      { company_name: companyName }
    );
    
    if (error) {
      console.error('Error creating company:', error);
      return null;
    }
    
    return companyId;
  } catch (error) {
    console.error('Exception during company creation:', error);
    return null;
  }
};

/**
 * Creates a user record in the users table
 * @param userId The user's auth ID
 * @param email The user's email
 * @param fullName The user's full name
 * @param companyId The ID of the company the user belongs to
 * @returns The user data or null if there was an error
 */
export const createUser = async (userId: string, email: string, fullName: string | null, companyId: string) => {
  try {
    console.log('Creating user record for:', userId, email, fullName, companyId);
    
    const { data: userData, error } = await supabase
      .from('users')
      .insert([{
        id: userId,
        email: email,
        full_name: fullName,
        company_id: companyId
      }])
      .select('*, companies(name, website, phone, address, logo_url)')
      .single();
    
    if (error) {
      console.error('Error creating user record:', error);
      return null;
    }
    
    console.log('Created user record successfully:', userData);
    return userData;
  } catch (error) {
    console.error('Exception during user creation:', error);
    return null;
  }
};

/**
 * Ensures that the authenticated user exists in the users table.
 * This function should be called after authentication.
 * @returns The user data from the users table, or null if there was an error
 */
export const ensureUserExists = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.error('No authenticated user found');
      return null;
    }
    
    console.log('Ensuring user exists for ID:', user.id);
    
    // Check if user exists in the users table
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('*, companies(name, website, phone, address, logo_url)')
      .eq('id', user.id)
      .maybeSingle(); 
    
    if (checkError) {
      console.error('Error checking if user exists:', checkError);
      console.error('Error details:', JSON.stringify(checkError));
      return null;
    }
    
    // If user doesn't exist, create them
    if (!existingUser) {
      console.log('User not found in database, creating new user record');
      
      // Step 1: Create company
      let companyId: string | null = null;
      const companyName = user.user_metadata?.company_name || 'Default Company';
      
      companyId = await createCompany(companyName);
      
      if (!companyId) {
        console.error('Failed to get company ID after creation');
        return null;
      }
      
      // Step 2: Create user with the company ID
      const userData = await createUser(
        user.id, 
        user.email || '', 
        user.user_metadata?.full_name || null, 
        companyId
      );
      
      if (!userData) {
        console.error('Failed to create user record');
        return null;
      }
      
      return userData;
    }
    
    console.log('Found existing user record:', existingUser);
    return existingUser;
  } catch (error) {
    console.error('Error in ensureUserExists:', error);
    console.error('Error details:', JSON.stringify(error));
    return null;
  }
};

/**
 * Gets a user by email from the users table
 * @param email The email to look up
 * @returns The user data or null if not found/error
 */
export const getUserByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*, companies(name, website, phone, address, logo_url)')
      .eq('email', email)
      .maybeSingle();
    
    if (error) {
      console.error('Error fetching user by email:', error);
      return null;
    }
    
    return data;
  } catch (error) {
    console.error('Exception during user lookup:', error);
    return null;
  }
};
