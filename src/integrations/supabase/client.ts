
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bxalgkqkqxrnirzjqsqb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ4YWxna3FrcXhybmlyempxc3FiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MDgyMTcsImV4cCI6MjA2MDM4NDIxN30.uni1-viSrGowXOM4b5vFADuBAmzsJgAH5de2Id1r0fU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

/**
 * Creates a company record and returns the company ID
 * @param companyName The name of the company to create
 * @returns The ID of the created company
 */
export const createCompany = async (companyName: string): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .from('companies')
      .insert([{ name: companyName }])
      .select('id')
      .single();
    
    if (error) {
      console.error('Error creating company:', error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error('Exception in createCompany:', error);
    return null;
  }
};

/**
 * Creates a user record in the users table
 * @param userId A manually generated UUID for the user
 * @param email The user's email
 * @param fullName The user's full name
 * @param companyId The ID of the company the user belongs to
 * @returns The created user data or null if there was an error
 */
export const createUser = async (
  userId: string,
  email: string,
  fullName: string | null,
  companyId: string
) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .insert([{
        id: userId,
        email,
        full_name: fullName,
        company_id: companyId
      }])
      .select('*, companies(name, website, phone, address, logo_url)')
      .single();
    
    if (error) {
      console.error('Error creating user record:', error);
      return null;
    }
    
    return data;
  } catch (error) {
    console.error('Exception in createUser:', error);
    return null;
  }
};

/**
 * Gets a user by email
 * @param email The email to look up
 * @returns The user data or null if not found
 */
export const getUserByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*, companies(name, website, phone, address, logo_url)')
      .eq('email', email)
      .maybeSingle();
    
    if (error) {
      console.error('Error fetching user by email:', error);
      return null;
    }
    
    return data;
  } catch (error) {
    console.error('Exception in getUserByEmail:', error);
    return null;
  }
};
